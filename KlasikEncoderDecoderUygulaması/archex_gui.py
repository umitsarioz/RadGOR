# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from generateReport import generate_desc,extract_features_new_image
from pickle import load
from keras.models import load_model
import time
import numpy as np
import fpdf


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(510, 400)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(510, 400))
        MainWindow.setMaximumSize(QtCore.QSize(510, 400))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/radgor_logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.txt_dosyaAdi = QtWidgets.QTextBrowser(self.centralwidget)
        self.txt_dosyaAdi.setGeometry(QtCore.QRect(20, 60, 281, 31))
        self.txt_dosyaAdi.setObjectName("txt_dosyaAdi")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 81, 31))
        self.label.setObjectName("label")
        self.btn_ekle = QtWidgets.QToolButton(self.centralwidget)
        self.btn_ekle.setGeometry(QtCore.QRect(330, 50, 41, 41))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/add_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_ekle.setIcon(icon1)
        self.btn_ekle.setIconSize(QtCore.QSize(54, 48))
        self.btn_ekle.setAutoRaise(True)
        self.btn_ekle.setObjectName("btn_ekle")
        self.btn_baslat = QtWidgets.QToolButton(self.centralwidget)
        self.btn_baslat.setGeometry(QtCore.QRect(390, 50, 41, 41))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/start.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_baslat.setIcon(icon2)
        self.btn_baslat.setIconSize(QtCore.QSize(54, 48))
        self.btn_baslat.setAutoRaise(True)
        self.btn_baslat.setObjectName("btn_baslat")
        self.btn_kaydet = QtWidgets.QToolButton(self.centralwidget)
        self.btn_kaydet.setGeometry(QtCore.QRect(450, 50, 51, 41))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_kaydet.setIcon(icon3)
        self.btn_kaydet.setIconSize(QtCore.QSize(48, 32))
        self.btn_kaydet.setAutoRaise(True)
        self.btn_kaydet.setObjectName("btn_kaydet")
        self.txt_bilgiYazisi = QtWidgets.QLabel(self.centralwidget)
        self.txt_bilgiYazisi.setGeometry(QtCore.QRect(20, 310, 271, 31))
        self.txt_bilgiYazisi.setObjectName("txt_bilgiYazisi")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 100, 491, 211))
        self.groupBox.setObjectName("groupBox")
        self.txt_rapor = QtWidgets.QTextBrowser(self.groupBox)
        self.txt_rapor.setGeometry(QtCore.QRect(10, 20, 471, 181))
        self.txt_rapor.setObjectName("txt_rapor")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(360, 320, 131, 21))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 510, 21))
        self.menubar.setObjectName("menubar")
        self.menu_howtouse = QtWidgets.QMenu(self.menubar)
        self.menu_howtouse.setObjectName("menu_howtouse")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu_howtouse.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        ## --- GUI TASARIMI BİTTİ ---- ##

        # Script çalışması için gerekli dosyalar ve değişkenlerin başlangıç durumlarının atanması
        self.image_path = ''
        self.report = ''
        self.model_vgg19_path = 'C:/Users/umtsr/Desktop/BM495/Uygulama Dosyaları/models/model_loss2.043-val_loss2.302.h5'
        self.tokenizer_findings_path = 'C:/Users/umtsr/Desktop/BM495/Uygulama Dosyaları/models/tokenizer.pkl'
        self.max_length=151


        # Rapor için görüntü ekleyen fonksiyon.
        def on_add_image():
            full_path = QtWidgets.QFileDialog.getOpenFileName(None,'Choose X-ray Image','','Image files (*.jpg, *png)')
            try:
                fn = full_path[0]
                self.btn_baslat.setEnabled(True)
                self.image_path = fn
                self.txt_dosyaAdi.setText(fn.split(sep='/')[-1])
                self.txt_bilgiYazisi.setText("Durum: X-ray görüntüsü yüklendi.")
            except Exception:
                pass

        def giveInfo():
            self.txt_bilgiYazisi.setText("Durum: Görüntü anlamlandırılıyor...")
            basla = time.time()
            start_report_generation()
            time.sleep(1)
            bitis = time.time()
            gecensure = "Geçen Zaman: " + str(np.floor(bitis-basla)) + ' sn'
            self.label_2.setText(gecensure)
            self.txt_bilgiYazisi.setText("Durum: Rapor oluşturuldu! Kaydedebilirsiniz.")
            self.txt_rapor.setText(self.report)
            self.btn_kaydet.setEnabled(True)

        # Rapor için string oluşturan fonksiyon
        def start_report_generation():
            x_ray_image_feature = extract_features_new_image(self.image_path)
            print("Image features: ",x_ray_image_feature)
            model_vgg_19 = load_model(self.model_vgg19_path)
            tokenizer = load(open(self.tokenizer_findings_path,'rb'))
            try:
                self.report = generate_desc(model_vgg_19,tokenizer,x_ray_image_feature,self.max_length)
            except Exception as e:
                self.txt_bilgiYazisi.setText("HATA!\n",e)

        # Raporu kaydetme fonksiyonu. Burada Txt ya da pdf 'e dönüştürülüp kaydedilecek.
        def on_save_report():
            save_path = QtWidgets.QFileDialog.getSaveFileName(None,'Save report','ornek_rapor','Report file (*.pdf)')
            try:
                filename = save_path[0]
                convert2PDF(self.report,filename)
                self.txt_bilgiYazisi.setText("Durum: Rapor kaydedildi.!")
            except Exception:
                pass

        def convert2PDF(raporum,dosyaAdi):
            self.txt_bilgiYazisi.setText("RAPOR KAYDETME CALISIYOR")
            raporum = self.report.split()
            s = 15 # bir satırdaki kelime sayısı
            satir_sayisi = int(len(raporum) / s) # satır sayisi
            lines = list() # tüm satirları tutacak olan liste
            mevcut_satir = 0 # o anda bulunulan satır sayisi
            my_sentences = list()
            try:
                for i in range(satir_sayisi) :
                    baslangic =  i * s
                    bitis = (i+1) * s
                    line = raporum[baslangic:bitis]
                    lines.append(line)
                    mevcut_satir +=1
                if (mevcut_satir*s) < len(raporum):
                    son_satir = raporum[(mevcut_satir*s):]
                    lines.append(son_satir)

            except Exception as e :
                print("Exception:",e)

            try:
                pdf = fpdf.FPDF()
                pdf.add_page()
                pdf.set_font("Arial",size=12)
                pdf.cell(200,10,txt='RAPOR',ln=1,align='C')
                for i in range(len(lines)):
                    my_text = lines[i]
                    text = ' '
                    for j in my_text:
                        text += ' '+ j
                    pdf.cell(200,10,txt=text,ln=i+2,align='L')
                pdf.output(dosyaAdi)
            except Exception as e:
                print("HATA:",e)
        # Bağlantılar
        self.btn_ekle.clicked.connect(on_add_image)
        self.btn_baslat.clicked.connect(giveInfo)
        self.btn_kaydet.clicked.connect(on_save_report)

        # Başlangıç için butonları deaktif et.
        self.btn_baslat.setEnabled(False)
        self.btn_kaydet.setEnabled(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AR-CheX"))
        self.label.setText(_translate("MainWindow", "Dosya Adı"))
        self.btn_ekle.setText(_translate("MainWindow", "Ekle"))
        self.btn_baslat.setText(_translate("MainWindow", "Baslat"))
        self.btn_kaydet.setText(_translate("MainWindow", "Kaydet"))
        self.txt_bilgiYazisi.setText(_translate("MainWindow", "Durum: Dosya Yüklenmedi"))
        self.groupBox.setTitle(_translate("MainWindow", "Rapor"))
        self.label_2.setText(_translate("MainWindow", "Geçen Zaman: 00:00:00"))
        self.menu_howtouse.setTitle(_translate("MainWindow", "Nasıl Kullanılır?"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
