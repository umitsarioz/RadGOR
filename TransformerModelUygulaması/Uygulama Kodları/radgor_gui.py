# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'radgor_arayuz.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import datetime,time,os
import numpy as np
from fpdf import FPDF


from modelStructure import loadPredictionModel,loadExtractModel,loadTokenizer
from predictor import generateOneCaption


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        CURR_DIR = os.getcwd()
        self.ttf_fontpath = os.path.join(CURR_DIR,'fonts','NotoSans-Regular.ttf')
        self.extract_model_path = os.path.join(CURR_DIR, 'modeller', 'extraction_model')
        self.prediction_model_weights_path = os.path.join(CURR_DIR, 'modeller', 'mytransformer_model_weights','mytransformer_model_weights')
        self.tokenizer_path = os.path.join(CURR_DIR, 'modeller', 'mytknzr.pkl')

        self.baslangic_resmi_path = os.path.join(os.path.dirname(__file__),'icons','no_image.jpg') # bos resmin dosya yolu
        self.radgor_icon_path = os.path.join(os.path.dirname(__file__),'icons','radgor.png')
        self.goruntuekle_icon_path = os.path.join(os.path.dirname(__file__),'icons','goruntu_ekle.png')
        self.yorumla_icon_path = os.path.join(os.path.dirname(__file__),'icons','yorumla.png')
        self.kaydet_icon_path = os.path.join(os.path.dirname(__file__),'icons','kaydet.png') 

        ### GUI TASARIMI
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 768)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1024, 768))
        MainWindow.setMaximumSize(QtCore.QSize(1024, 768))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.radgor_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setIconSize(QtCore.QSize(36, 36))
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gb_hastaBilgileri = QtWidgets.QGroupBox(self.centralwidget)
        self.gb_hastaBilgileri.setGeometry(QtCore.QRect(550, 10, 421, 281))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.gb_hastaBilgileri.setFont(font)
        self.gb_hastaBilgileri.setObjectName("gb_hastaBilgileri")
        self.label = QtWidgets.QLabel(self.gb_hastaBilgileri)
        self.label.setGeometry(QtCore.QRect(10, 30, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.gb_hastaBilgileri)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_5 = QtWidgets.QLabel(self.gb_hastaBilgileri)
        self.label_5.setGeometry(QtCore.QRect(10, 150, 71, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_4 = QtWidgets.QLabel(self.gb_hastaBilgileri)
        self.label_4.setGeometry(QtCore.QRect(10, 110, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.txtbox_tcno = QtWidgets.QLineEdit(self.gb_hastaBilgileri)
        self.txtbox_tcno.setGeometry(QtCore.QRect(120, 40, 281, 31))
        self.txtbox_tcno.setStyleSheet("#formframe{\n"
"border-radius:5px\n"
"}\n"
"") 
        self.txtbox_tcno.setMaxLength(11)
        self.txtbox_tcno.setObjectName("txtbox_tcno")
        self.txtbox_adsoyad = QtWidgets.QLineEdit(self.gb_hastaBilgileri)
        self.txtbox_adsoyad.setGeometry(QtCore.QRect(120, 80, 281, 31))
        self.txtbox_adsoyad.setStyleSheet("#formframe{\n"
"border-radius:5px\n"
"}\n"
"")
        self.txtbox_adsoyad.setObjectName("txtbox_adsoyad")
        self.txtbox_doktor = QtWidgets.QLineEdit(self.gb_hastaBilgileri)
        self.txtbox_doktor.setGeometry(QtCore.QRect(120, 120, 281, 31))
        self.txtbox_doktor.setStyleSheet("#formframe{\n"
"border-radius:5px\n"
"}\n"
"")
        self.txtbox_doktor.setObjectName("txtbox_doktor")
        self.txtbox_sikayet = QtWidgets.QPlainTextEdit(self.gb_hastaBilgileri)
        self.txtbox_sikayet.setGeometry(QtCore.QRect(120, 160, 281, 111))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txtbox_sikayet.sizePolicy().hasHeightForWidth())
        self.txtbox_sikayet.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.txtbox_sikayet.setFont(font)
        self.txtbox_sikayet.setStyleSheet("#formframe{\n"
"border-radius:5px\n"
"}\n"
"")
        self.txtbox_sikayet.setObjectName("txtbox_sikayet")
        self.gbox_bulgular = QtWidgets.QGroupBox(self.centralwidget)
        self.gbox_bulgular.setGeometry(QtCore.QRect(550, 300, 421, 331))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.gbox_bulgular.setFont(font)
        self.gbox_bulgular.setObjectName("gbox_bulgular")
        self.txtbox_bulgular = QtWidgets.QPlainTextEdit(self.gbox_bulgular)
        self.txtbox_bulgular.setGeometry(QtCore.QRect(10, 40, 401, 281))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txtbox_bulgular.sizePolicy().hasHeightForWidth())
        self.txtbox_bulgular.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.txtbox_bulgular.setFont(font)
        self.txtbox_bulgular.setStyleSheet("#formframe{\n"
"border-radius:5px\n"
"}\n"
"")
        self.txtbox_bulgular.setObjectName("txtbox_bulgular")
        self.gbox_goruntu = QtWidgets.QGroupBox(self.centralwidget)
        self.gbox_goruntu.setGeometry(QtCore.QRect(20, 10, 511, 621))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.gbox_goruntu.setFont(font)
        self.gbox_goruntu.setObjectName("gbox_goruntu")
        self.lbl_goruntu = QtWidgets.QLabel(self.gbox_goruntu)
        self.lbl_goruntu.setGeometry(QtCore.QRect(10, 40, 491, 561))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_goruntu.sizePolicy().hasHeightForWidth())
        self.lbl_goruntu.setSizePolicy(sizePolicy)
        self.lbl_goruntu.setText("")
        self.lbl_goruntu.setPixmap(QtGui.QPixmap(self.baslangic_resmi_path))
        self.lbl_goruntu.setScaledContents(True)
        self.lbl_goruntu.setObjectName("lbl_goruntu")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.toolBar.setFont(font)
        self.toolBar.setMovable(False)
        self.toolBar.setOrientation(QtCore.Qt.Horizontal)
        self.toolBar.setIconSize(QtCore.QSize(36, 36))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionAddImage = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(self.goruntuekle_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddImage.setIcon(icon1)
        self.actionAddImage.setObjectName("actionAddImage")
        self.actionYorumla = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(self.yorumla_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionYorumla.setIcon(icon2)
        self.actionYorumla.setObjectName("actionYorumla")
        self.actionRaporOlustur = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(self.kaydet_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRaporOlustur.setIcon(icon3)
        self.actionRaporOlustur.setObjectName("actionRaporOlustur")
        self.toolBar.addAction(self.actionAddImage)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionYorumla)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRaporOlustur)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
         # Başlangıçta aktif olmayacak olan butonlar.
        self.actionYorumla.setEnabled(False)
        self.actionRaporOlustur.setEnabled(False)
        self.txtbox_adsoyad.setEnabled(False)
        self.txtbox_tcno.setEnabled(False)
        self.txtbox_sikayet.setEnabled(False)
        self.txtbox_doktor.setEnabled(False)
        self.txtbox_bulgular.setEnabled(False)
        # button bağlantıları
        self.actionAddImage.triggered.connect(self.goruntuEkle)
        self.actionYorumla.triggered.connect(self.yorumla)
        self.actionRaporOlustur.triggered.connect(self.raporOlustur)
        self.gerekliDosyalariYukle()

    def gerekliDosyalariYukle(self):
        # Gerekli dosyaları yükle
        try:
            self.extract_model = loadExtractModel(self.extract_model_path)
            self.predict_model = loadPredictionModel()
            self.predict_model.load_weights(self.prediction_model_weights_path)
            self.tokenizer,self.seq_len = loadTokenizer(self.tokenizer_path)
            print("INFO: Tüm Gerekli dosyalar yüklendi..")
            print("Seq_len:",self.seq_len)
            print("TYPES:")
            print("extract model:",type(self.extract_model))
            print("predict model:",type(self.predict_model))
            print("tokenizer:",type(self.tokenizer))
            print("seq-len:",type(self.seq_len))
            self.statusbar.showMessage("Gerekli dosyalar yüklendi", 2000)
        except Exception as e :
            raise Exception("Dosyalar yüklenirken hata :  ",e)

    def goruntuEkle(self):
        try:
            self.txtbox_adsoyad.setEnabled(True)
            self.txtbox_tcno.setEnabled(True)
            self.txtbox_sikayet.setEnabled(True)
            self.txtbox_doktor.setEnabled(True)
            self.txtbox_bulgular.setEnabled(False)
            self.txtbox_tcno.setText('')
            self.txtbox_adsoyad.setText('')
            self.txtbox_sikayet.setPlainText('')
            self.txtbox_doktor.setText('')
            self.txtbox_bulgular.setPlainText('')
            dosya_adi = QFileDialog.getOpenFileName(None, 'Görüntü yükle', '', 'Görüntü dosyası (*.jpg | *.png | *.jpeg)') # Dosya yolunu al
            self.dosya_yolu = dosya_adi[0] # ilk indeksi dosya yolu
            print("INFO: Görüntü başarıyla yüklendi ve dosya yolu:", self.dosya_yolu) # log
            self.lbl_goruntu.setPixmap(QtGui.QPixmap(self.dosya_yolu)) # görüntüyü sisteme kullanıcının görmesi için yükle
            self.lbl_goruntu.setScaledContents(True) # görüntüyü scale et
            self.statusbar.showMessage("Görüntü başarıyla yüklendi.",2000) # Kullanıcıya bilgi ver
            self.actionYorumla.setEnabled(True)

        except Exception as e:
            raise Exception("HATA! Görüntü ekleme : " + e)

    def showPassingTime(self,baslangic):
        bitis = time.time()
        gecen_sure = np.round(bitis-baslangic,2)
        messg = f"Geçen süre {gecen_sure} saniye"
        print(messg)
        self.statusbar.showMessage(messg)
        return messg

    def yorumla(self):
        # Oznitelikleri cikart.
        baslangic = time.time()
        try:
            self.statusbar.showMessage("Görüntü yorumlanıyor..",2000)
            print("Görüntü yorumlanıyor...")
            tahmini_yorum = generateOneCaption(self.dosya_yolu,self.extract_model,self.predict_model,self.tokenizer,self.seq_len)
            try:
                print("type tahmini yorum:",type(tahmini_yorum),"\nty:",tahmini_yorum)
            except:
                raise Exception ("Tahmini yorumun tipi yok.")
            print("Görüntü yorumlandı.. >> YORUM : ",tahmini_yorum)

            messg = "Görüntü yorumlandı.\t" + str(self.showPassingTime(baslangic))
            self.statusbar.showMessage(messg)
        except Exception as e :
            print("HATA : YORUMLARKEN bir hata olustu:",e)
            sys.exit()

        self.txtbox_bulgular.setPlainText(tahmini_yorum)
        self.txtbox_bulgular.setEnabled(True)
        self.actionRaporOlustur.setEnabled(True)

    def sayiKontrolEt(self,girdi):
        for karakter in girdi:
            if karakter.isdigit(): # Girdide herhangi bir sayı varsa False döndürür.
                return False
        return True

    def tarihHesapla(self,tarih):
        yil,ay,gun = tarih.split('-')
        if gun[0] == str(0):
            gun = gun[1]
        aylar = ["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"]
        if ay[0] == str(0):
            ay_adi = aylar[int(ay[1])-1]
            return f'{gun} {ay_adi} {yil}'
        else:
            ay_adi =  aylar[int(ay)-1]
            return f'{gun} {ay_adi} {yil}'

    def raporOlustur(self):
        tc_no = self.txtbox_tcno.text().strip()
        save_path = QtWidgets.QFileDialog.getSaveFileName(None, 'Raporu kaydet', 'rapor_'+tc_no, 'Rapor dosyası (*.pdf)')
        rapor_kayit_dosyasi = save_path[0]
        ad_soyad = self.txtbox_adsoyad.text().strip()
        doktor_adi = self.txtbox_doktor.text().strip()
        sikayet = self.txtbox_sikayet.toPlainText().strip()
        bulgular = self.txtbox_bulgular.toPlainText().strip()
        tarih = str(datetime.datetime.now()).split()[0] # tarihi alan fonksiyon # Yıl - Ay - Gün
        tarih = self.tarihHesapla(tarih)
        
        if tc_no.isdigit(): # tc no rakamlardan olusmalı
            if len(ad_soyad)>5 and self.sayiKontrolEt(ad_soyad): # isim soy isim min 5 karakter
                if len(tc_no)==11: # tc. no 11 karakter
                    if len(doktor_adi)>5 and self.sayiKontrolEt(doktor_adi): # doktor adi min 5 karakter
                        if len(sikayet)>10: # sikayet min 10 karakter
                            # RAPORU PDF'E yaz
                            raporum = bulgular.split()
                            s = 10  # bir satırdaki kelime sayısı
                            satir_sayisi = int(len(raporum) / s)  # satır sayisi
                            lines = list()  # tüm satirları tutacak olan liste
                            mevcut_satir = 0  # o anda bulunulan satır sayisi
                          
                            try:
                                for i in range(satir_sayisi):
                                    baslangic = i * s
                                    bitis = (i + 1) * s
                                    line = raporum[baslangic:bitis]
                                    lines.append(line)
                                    mevcut_satir += 1
                                if (mevcut_satir * s) < len(raporum):
                                    son_satir = raporum[(mevcut_satir * s):]
                                    lines.append(son_satir)

                            except Exception as e:
                                print("Exception:", e)

                            try:
                                pdf = FPDF()
                                pdf.add_page()

                                pdf.add_font("YeniFont", style="", fname=self.ttf_fontpath, uni=True)
                                pdf.set_font("YeniFont", size=12)
                                pdf.set_title("Radgor rapor")
                                pdf.set_auto_page_break(20)
                                pdf.cell(200, 10, txt='RadGOR - Radyolojik Görüntü Raporu', ln=1, align='C')
                                pdf.cell(200, 10, txt='Tarih: ' + str(tarih), ln=2, align='R')
                                pdf.cell(200, 10, txt='Hasta Bilgileri', ln=2, align='L')
                                pdf.cell(200, 10, txt='T.C. No: ' + str(tc_no), ln=3, align='L')
                                pdf.cell(200, 10, txt='Ad Soyad: ' + str(ad_soyad), ln=4, align='L')
                                pdf.cell(200, 10, txt='Şikayeti: ' + str(sikayet), ln=5, align='L')
                                pdf.cell(200, 10, txt='Bulgular: ', ln=6, align='L')
                                
                                # bulguları ekle
                                next_ln = 7
                                for i in range(len(lines)):
                                    next_ln += i
                                    print("next_line:",next_ln)
                                    my_text = lines[i]
                                    print("Mytext:",my_text,"type:",type(my_text))
                                    text = ' '
                                    for j in my_text:
                                        text += ' ' + j
                                    pdf.cell(200, 10, txt=text, ln= next_ln, align='L')
                                
                                # Boşluk bırak
                                for i in range(5):
                                    next_ln += i
                                    pdf.cell(200, 10, txt=' ', ln=next_ln, align='L')

                                pdf.cell(200, 10, txt='Dr. ' + str(doktor_adi), ln=next_ln+1, align='L')
                                pdf.cell(200, 10, txt='    İMZA', ln=next_ln+2, align='L')
                                pdf.output(rapor_kayit_dosyasi)
                                self.statusbar.showMessage("Rapor oluşturuldu..",3000)
                                print("Tarih:", tarih)
                                print("\nTC_no:", tc_no)
                                print("\nAd_soyad:", ad_soyad)
                                print("\nDoktor_adi:",doktor_adi)
                                print("\nSikayet", sikayet)
                                print("\nBulgular:", bulgular)
                                print("Dosya adi:",rapor_kayit_dosyasi)
                                print("FONTFILEPATH:",self.ttf_fontpath)

                            except Exception as e:
                                print("HATA:", e)

                        else:
                            self.statusbar.showMessage("HATA ! : Hasta bilgilerini doğru giriniz! Şikayetiniz boş ya da çok kısa olamaz.", 2000)
                    else:
                        self.statusbar.showMessage("HATA ! : Hasta bilgilerini doğru giriniz! Doktor ismi çok kısa veya rakam içeriyor.", 2000)
                else:
                    self.statusbar.showMessage("HATA ! : Hasta bilgilerini doğru giriniz! T.C. No eksik.", 2000)
            else:
                self.statusbar.showMessage("HATA ! : Hasta bilgilerini doğru giriniz! Ad soyad çok kısa veya rakam içeriyor.",2000)
        else:
           self.statusbar.showMessage("HATA ! : Hasta T.C. No lütfen doğru giriniz.",3000)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RadGOR"))
        self.gb_hastaBilgileri.setTitle(_translate("MainWindow", "Hasta Bilgileri"))
        self.label.setText(_translate("MainWindow", "T.C. No:"))
        self.label_2.setText(_translate("MainWindow", "Adı soyadı:"))
        self.label_5.setText(_translate("MainWindow", "Şikayeti:"))
        self.label_4.setText(_translate("MainWindow", "Doktor Adı: "))
        self.gbox_bulgular.setTitle(_translate("MainWindow", "Bulgular"))
        self.gbox_goruntu.setTitle(_translate("MainWindow", "Radyolojik Görüntü"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Komutlar"))
        self.actionAddImage.setText(_translate("MainWindow", "Görüntü Ekle"))
        self.actionAddImage.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionYorumla.setText(_translate("MainWindow", "Yorumla"))
        self.actionYorumla.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionRaporOlustur.setText(_translate("MainWindow", "Rapor Oluştur ve Kaydet"))
        self.actionRaporOlustur.setToolTip(_translate("MainWindow", "Rapor Oluştur ve kaydet"))
        self.actionRaporOlustur.setShortcut(_translate("MainWindow", "Ctrl+S"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion") # arayüz stilini değiştirir.
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
